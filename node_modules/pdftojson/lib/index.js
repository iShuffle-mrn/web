'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = pdftojson;

var _pdftotextWrapper = require('./pdftotext-wrapper');

var _pdftotextWrapper2 = _interopRequireDefault(_pdftotextWrapper);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _processor = require('./processor');

// Unhandled rejection handling
//
/* istanbul ignore next */
process.on('unhandledRejection', function (reason) {
  console.log('Unhandled Rejection, reason:', reason);
  if (reason.stack) {
    console.err(reason.stack);
  }
});

// Main processor
//

function pdftojson(pdfFileName) {
  var options = arguments[1] === undefined ? {} : arguments[1];
  var htmlData, pages;
  return _regeneratorRuntime.async(function pdftojson$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _pdftotextWrapper2['default'])(pdfFileName, options.cmd));

      case 2:
        htmlData = context$1$0.sent;

        pages = _parser2['default'].parse(htmlData);
        pages.forEach(function (page) {
          if (options.sort) {
            page.words = (0, _processor.sortWords)(page.words);
          }
          page.words = (0, _processor.mergeWordsInLines)((0, _processor.removeDuplicateWords)(page.words));
        });

        return context$1$0.abrupt('return', pages);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

module.exports = exports['default'];